# -*- coding: utf-8 -*-
"""Intelligent_System2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gRXfw2YF8jELBHzlqYhVYq4hWTQsrozH
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

"""**We have to train the data**"""

raw_data= pd.read_csv('train_FD001.txt', sep=' ', header = None)
raw_data

raw_data = raw_data.drop([26,27], axis='columns')
raw_data

raw_data.columns = ['ID', 'Cycle', 'OpSet1', 'OpSet2', 'OpSet3', 'SensorMeasure1', 'SensorMeasure2', 'SensorMeasure3', 'SensorMeasure4', 'SensorMeasure5', 'SensorMeasure6', 'SensorMeasure7', 'SensorMeasure8', 'SensorMeasure9', 'SensorMeasure10', 'SensorMeasure11', 'SensorMeasure12', 'SensorMeasure13', 'SensorMeasure14', 'SensorMeasure15', 'SensorMeasure16', 'SensorMeasure17', 'SensorMeasure18', 'SensorMeasure19', 'SensorMeasure20', 'SensorMeasure21']
raw_data

raw_data[raw_data['ID'] == 1]

"""**REMAINING USEFUL LIFE**

RUL = EOL - Cycle

RUL = Remaining Useful Life

EOL = End of Life in cycles
"""

EOL=[]
for sl_no in raw_data['ID']:
       EOL.append( ((raw_data[raw_data['ID'] == sl_no]["Cycle"]).values)[-1])

((raw_data[raw_data['ID'] == 1]["Cycle"]).values)[-1]

np.shape(EOL)

raw_data["EOL"]=EOL
raw_data

"""**HERE WE HAVE FOUND OUT THE RUL OF THE ENGINES**"""

raw_data["RUL"] = raw_data["EOL"]-raw_data["Cycle"]
df = raw_data.drop(columns=['EOL'])
df

delete_columns=['OpSet1',
 'OpSet2',
 'OpSet3',
 'SensorMeasure1',
 'SensorMeasure5',
 'SensorMeasure6',
 'SensorMeasure9',
 'SensorMeasure10',
 'SensorMeasure14',
 'SensorMeasure16',
 'SensorMeasure18',
 'SensorMeasure19']

df=df.drop(columns=delete_columns)
df

df.to_csv('Processed_Train_001.csv', index=None)

df=pd.read_csv("Processed_Train_001.csv")
df

"""**TESTING DATA**"""

file_no=1                      # Give the sl.no of the Test_file [1,2,3,4]
######################################
raw_data = pd.read_csv('test_FD00{}.txt'.format(file_no), sep=' ', header = None)
raw_data = raw_data.drop([26,27], axis='columns')
raw_data.columns = ['ID', 'Cycle', 'OpSet1', 'OpSet2', 'OpSet3', 'SensorMeasure1', 'SensorMeasure2', 'SensorMeasure3', 'SensorMeasure4', 'SensorMeasure5', 'SensorMeasure6', 'SensorMeasure7', 'SensorMeasure8', 'SensorMeasure9', 'SensorMeasure10', 'SensorMeasure11', 'SensorMeasure12', 'SensorMeasure13', 'SensorMeasure14', 'SensorMeasure15', 'SensorMeasure16', 'SensorMeasure17', 'SensorMeasure18', 'SensorMeasure19', 'SensorMeasure20', 'SensorMeasure21']

#######################################
given_no_of_cycles=[]
for i in range (1,len(raw_data['ID'].unique())+1):
    given_no_of_cycles.append(len(raw_data[raw_data['ID']==i]))
given_no_of_cycles=np.array(given_no_of_cycles).reshape([len(given_no_of_cycles),1])
########################################
cycle_ran_after = pd.read_csv('RUL_FD00{}.txt'.format(file_no), sep=' ', header = None)
cycle_ran_after=cycle_ran_after.drop([1], axis='columns')
cycle_ran_after = np.array(cycle_ran_after)
########################################
EOL=[]
for i in raw_data['ID']:
        EOL.append(given_no_of_cycles[i-1]+cycle_ran_after[i-1] )
EOL = np.array(EOL).reshape([len(EOL),1])
#######################################
raw_data['EOL']=EOL
raw_data["RUL"] = raw_data["EOL"]-raw_data["Cycle"]
raw_data=raw_data.drop(columns=['ID','EOL'])
raw_data=raw_data.drop(columns=delete_columns)
#######################################

raw_data.to_csv('Processed_Test_00{}.csv'.format(file_no), index=None)
raw_data

"""**TRAINING MODEL USING ML**"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

def give_Test_engine(Test_no,engine_id):
    "Test_no, is the Sl.no of Test-set"
    "engine_id, is the ID of engine"
    import pandas as pd
    import numpy as np
    df=pd.read_csv("Processed_Test_00{}.csv".format(Test_no))
    test = df[df['ID']==engine_id]
    test = test.drop(columns=['ID'])
    X_test=test.iloc[:,:-1]
    y_test=test.iloc[:,-1]
    return X_test,y_test

def give_Train_engine(Train_no,engine_id):
    "Train_no, is the Sl.no of Train-set"
    "engine_id, is the ID of engine"
    import pandas as pd
    import numpy as np
    df=pd.read_csv("Processed_Train_00{}.csv".format(Train_no))
    train = df[df['ID']==engine_id]
    train = train.drop(columns=['ID'])
    X_train=train.iloc[:,:-1]
    y_train=train.iloc[:,-1]
    return X_train,y_train

"""**IMPORT THE TRAINING DATA**"""

df1 = pd.read_csv('Processed_Train_001.csv')
df2 = pd.read_csv('Processed_Train_002.csv')
df3 = pd.read_csv('Processed_Train_003.csv')
df4 = pd.read_csv('Processed_Train_004.csv')

df=pd.concat([df1,df2,df3,df4])

df

X = df.iloc[:, 0:-1]
y = df.iloc[:, -1]

# Train Test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, shuffle=False)

"""**Training a Random Forest Regression Model**"""

regressor = RandomForestRegressor()
regressor.fit(X_train,y_train)

y_pred = regressor.predict(X_test)
print('RMSE on Test set:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

y_pred_train = regressor.predict(X_train)
print('RMSE on Training set:', np.sqrt(metrics.mean_squared_error(y_train, y_pred_train)))

a,b=250,400
rang = list(range(a,b))
plt.plot(np.array(X_test)[rang,0],y_pred[rang])
plt.plot(np.array(X_test)[rang,0],np.array(y_test)[rang])

plt.ylabel('RUL')
plt.xlabel('CYCLES')
plt.show()

RF = RandomForestRegressor( n_estimators= 400)
RF.fit(X_train,y_train)
y_pred = RF.predict(X_test)
print('RMSE on Test set:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

y_pred_train = RF.predict(X_train)
print('RMSE on Training set:', np.sqrt(metrics.mean_squared_error(y_train, y_pred_train)))