# -*- coding: utf-8 -*-
"""Intelligent System Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XPV2VNynsM7abcsosqfXeUnz9tPD9xCj
"""

import numpy as np                        #Mathematical operation
import matplotlib.pyplot as plt           #plots
import pandas as pd                       #work with the dataframes
import seaborn as sns                     #plots(visualize dataframes)
from sklearn.metrics import confusion_matrix, accuracy_score    #classification problem

""" **READING THE DATA**"""

raw_data = pd.read_csv('train_FD001.txt', sep=' ', header = None)
raw_data

raw_data = raw_data.drop([26,27], axis='columns')

"""**Column 1: Corresponds to engine number.**

**Column 2: Corresponds to cycle number.**

**Columns 3,4,5: 3 operational settings.**

**Columns 6-26: 21 sensor measurements.**
"""

raw_data

raw_data.columns = ['Engine_Number', 'Cycle', 'OpSet1', 'OpSet2', 'OpSet3', 'SensorMeasure1', 'SensorMeasure2', 'SensorMeasure3', 'SensorMeasure4', 'SensorMeasure5', 'SensorMeasure6', 'SensorMeasure7', 'SensorMeasure8', 'SensorMeasure9', 'SensorMeasure10', 'SensorMeasure11', 'SensorMeasure12', 'SensorMeasure13', 'SensorMeasure14', 'SensorMeasure15', 'SensorMeasure16', 'SensorMeasure17', 'SensorMeasure18', 'SensorMeasure19', 'SensorMeasure20', 'SensorMeasure21']
raw_data

"""**Extracting Individual Engine Cycle Time**"""

raw_data[raw_data['Engine_Number'] == 1]

"""**END OF LIFE**"""

EOL=[]
for sl_no in raw_data['Engine_Number']:
        EOL.append( ((raw_data[raw_data['Engine_Number'] == sl_no]["Cycle"]).values)[-1])

np.shape(EOL)

"""**Updating the End of Life for the given Engines**"""

raw_data["EOL"]=EOL

raw_data

"""**To predict the Remaining Useful Life of Engine using the sensor data**

**Classification according to the condition**: For that condition we have calculated the LIFE RATIO of engine

**LIFE RATIO (LR)= Cycle/EOL**

**Conditions**

Good Condition - 0
Moderate Condition - 1
Warning Condition - 2

1. if LR <= 0.6 - Good Condition
2. if 0.6 < LR <= 0.8 - Moderate Condition
3. if 0.8 < LR - Warning Condition

**Calculation of LR**
"""

raw_data["LR"] = raw_data["Cycle"].div(raw_data["EOL"])

raw_data

raw_data=raw_data.drop(columns=['Engine_Number','EOL'])

labels=[]
for i in range (0,len(raw_data)):
    if np.array(raw_data["LR"])[i] <= 0.6:
        labels.append(0)
    elif np.array(raw_data["LR"])[i] <= 0.8 :
        labels.append(1)
    else :
        labels.append(2)

raw_data["labels"]=labels
raw_data  = raw_data.drop(columns=['LR'])
raw_data

"""**TRAINING DATASETS**

All these training data are saved in .csv files
"""

raw_data.to_csv('Training_1_all_features.csv', index=None)

"""**Import all the datasets**

"""

df1 = pd.read_csv('Training_1_all_features.csv')
df2 = pd.read_csv('Training_2_all_features.csv')
df3 = pd.read_csv('Training_3_all_features.csv')
df4 = pd.read_csv('Training_4_all_features.csv')

df = pd.concat([df1,df2,df3,df4])   #DATA FRAMES

df

"""**Dividing these data into Features and Labels**

**X is the Feature Matrix and y is the label's column**
"""

X = df.iloc[:,0:-1]
y = df.iloc[:,-1]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.10, random_state = 0)



"""**We have taken 10% data for test**

**TRAINING A RANDOM FOREST MODEL**
"""

from sklearn.ensemble import RandomForestClassifier
RF = RandomForestClassifier()
RF.fit(X_train, y_train)

y_pred_RF = RF.predict(X_test)

cm = pd.DataFrame(confusion_matrix(y_test, y_pred_RF, normalize ='true')*100)
colormap = sns.color_palette("Reds")
sns.heatmap(cm, annot=True,cmap=colormap)

accuracy_score(y_test, y_pred_RF)

RF.get_params()

y_pred_RF = RF.predict(X_train)

cm = pd.DataFrame(confusion_matrix(y_train, y_pred_RF, normalize ='true')*100)
colormap = sns.color_palette("Blues")
sns.heatmap(cm, annot=True,cmap=colormap)

accuracy_score(y_train, y_pred_RF) # or RF.score(X_train,y_train)